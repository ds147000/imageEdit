var ImageEdit = (function () {
    'use strict';

    var APP_CONFIG = {
        width: 0,
        height: 0,
        output: 'base64',
        cWidth: null,
        cHeight: null,
        cut: true,
        zoom: true,
        move: true,
        spin: true,
        control: true
    };
    var APP_CANVAS_1 = 'image';
    var APP_CANVAS_2 = 'cover';
    var APP_BOX = 'image-edit-js';

    var control = /** @class */ (function () {
        function control(config) {
            this.$el = document.createElement('div');
            this.init(config);
        }
        control.prototype.init = function (config) {
            this.$el.setAttribute('class', 'control');
            this.$el.innerHTML = "\n                            <span>\u53D6\u6D88</span>\n                                <div class=\"icon\">\n                                    " + (config.spin ? '<i class="spin"></i>' : '') + "\n                                    " + (config.zoom ? '<i class="zoom"></i>' : '') + "\n                                </div>\n                            <span>\u5B8C\u6210</span>";
        };
        return control;
    }());

    /**
     * 判断位置是否被点击
     * @param x
     * @param y
     * @param rect
     */
    var getPosition = function (x, y, x2, y2) {
        var ix = Math.abs(x2 - x);
        var iy = Math.abs(y2 - y);
        return ix < 10 && iy < 10;
    };
    var getMove = function (event, oldEvent) {
        return { x: event.offsetX - oldEvent.offsetX, y: event.offsetY - oldEvent.offsetY };
    };

    var Scenes = /** @class */ (function () {
        function Scenes(config) {
            this.config = config;
            this.imageSize = { x: 0, y: 0, width: 0, height: 0, zoom: 1, rotate: 0 }; //背景图配置
            this.oldImageSize = { x: 0, y: 0, width: 0, height: 0, zoom: 1, rotate: 0 }; //旧背景图配置
            var box = document.createElement('div');
            this.$el = box;
            this.init();
        }
        Scenes.prototype.init = function () {
            this.$el.setAttribute('class', APP_BOX);
            this.$el.style.width = this.config.width + 'px';
            this.$el.style.height = this.config.height + 'px';
            this.initCutSize();
            this.initImageCanvas();
            this.initCoverCanvas();
            this.initControl();
        };
        Scenes.prototype.initControl = function () {
            if (this.config.control) //开启控制器
                this.control = new control(this.config);
            this.$el.append(this.control.$el);
        };
        Scenes.prototype.initImageCanvas = function () {
            var canvas = document.createElement('canvas');
            canvas.setAttribute('class', APP_CANVAS_1);
            this.$el.append(canvas);
            canvas.width = this.config.cWidth;
            canvas.height = this.config.cHeight;
            this.ctx = canvas.getContext('2d');
        };
        Scenes.prototype.initCoverCanvas = function () {
            if (this.config.cut !== false) { // 编辑功能开启
                var canvas = document.createElement('canvas');
                canvas.setAttribute('class', APP_CANVAS_2);
                this.$el.append(canvas);
                canvas.width = this.config.cWidth;
                canvas.height = this.config.cHeight;
                this.coverCtx = canvas.getContext('2d');
                canvas.addEventListener('mousedown', this.onMouseDown.bind(this));
                canvas.addEventListener('mousemove', this.onMouseMove.bind(this));
                canvas.addEventListener('mouseup', this.onMouseUp.bind(this));
            }
        };
        Scenes.prototype.onMouseDown = function (event) {
            this.isDownType(event.offsetX, event.offsetY);
            this.oldEvent = event;
            this.oldImageSize = Object.assign({}, this.imageSize);
        };
        Scenes.prototype.onMouseMove = function (event) {
            if (this.downType === 0) // 操作类型剪切框
                this.changeCut(event.offsetX, event.offsetY);
            // else // 操作类型为背景图
            else if (this.downType === 1) {
                var _a = getMove(event, this.oldEvent), x = _a.x, y = _a.y;
                this.moveImage(this.oldImageSize.x + x, this.oldImageSize.y + y);
            }
        };
        Scenes.prototype.onMouseUp = function (event) {
            this.downType = null;
        };
        /**
         * 获取触摸的类型
         * @param event
         */
        Scenes.prototype.isDownType = function (x, y) {
            x = this.config.cWidth / this.config.width * x;
            y = this.config.cHeight / this.config.height * y;
            if (getPosition(x, y, this.cutSize.x, this.cutSize.y)) {
                // 操作的为剪切框
                this.downType = 0;
                this.cutNumber = 0;
            }
            else if (getPosition(x, y, this.cutSize.x + this.cutSize.width, this.cutSize.y)) {
                this.downType = 0;
                this.cutNumber = 1;
            }
            else if (getPosition(x, y, this.cutSize.x + this.cutSize.width, this.cutSize.y + this.cutSize.height)) {
                this.downType = 0;
                this.cutNumber = 2;
            }
            else if (getPosition(x, y, this.cutSize.x, this.cutSize.y + this.cutSize.height)) {
                this.downType = 0;
                this.cutNumber = 3;
            }
            else
                // 操作的为背景图
                this.downType = 1;
        };
        /**
         * 修改剪切框大小
         * @param x
         * @param y
         */
        Scenes.prototype.changeCut = function (x, y) {
            switch (this.cutNumber) {
                case 0:
                    this.setCutSize(x, y, this.cutSize.x - x + this.cutSize.width, this.cutSize.y - y + this.cutSize.height);
                    break;
                case 1:
                    this.setCutSize(this.cutSize.x, y, x - this.cutSize.x, this.cutSize.y - y + this.cutSize.height);
                    break;
                case 2:
                    this.setCutSize(this.cutSize.x, this.cutSize.y, x - this.cutSize.x, y - this.cutSize.y);
                    break;
                case 3:
                    this.setCutSize(x, this.cutSize.y, this.cutSize.x - x + this.cutSize.width, y - this.cutSize.y);
                    break;
            }
        };
        /**初始化剪切框 */
        Scenes.prototype.initCutSize = function () {
            var cutSize = (this.config.cWidth < this.config.cHeight ? this.config.cWidth : this.config.cHeight) * 0.7;
            this.cutSize = {
                width: cutSize,
                height: cutSize,
                x: (this.config.cWidth - cutSize) / 2,
                y: (this.config.cHeight - cutSize) / 2
            };
        };
        // 设置剪切框大小
        Scenes.prototype.setCutSize = function (x, y, width, height) {
            width = width < 50 ? 50 : width;
            height = height < 50 ? 50 : height;
            this.cutSize = {
                x: x,
                y: y,
                width: width,
                height: height
            };
            this.drawCutRect();
        };
        /**绘制剪切框 */
        Scenes.prototype.drawCutRect = function () {
            this.coverCtx.clearRect(0, 0, this.config.cWidth, this.config.cHeight);
            this.coverCtx.fillStyle = 'rgba(0, 0, 0, 0.5)';
            this.coverCtx.fillRect(0, 0, this.config.cWidth, this.config.cHeight);
            this.coverCtx.clearRect(this.cutSize.x, this.cutSize.y, this.cutSize.width, this.cutSize.height);
            this.coverCtx.strokeStyle = 'rgba(255, 255, 255, 1)';
            this.coverCtx.lineWidth = 1;
            this.coverCtx.strokeRect(this.cutSize.x, this.cutSize.y, this.cutSize.width, this.cutSize.height);
            this.coverCtx.lineWidth = 4;
            // 左上角
            this.coverCtx.beginPath();
            this.coverCtx.moveTo(this.cutSize.x - 2, this.cutSize.y + 20);
            this.coverCtx.lineTo(this.cutSize.x - 2, this.cutSize.y - 2);
            this.coverCtx.lineTo(this.cutSize.x + 20, this.cutSize.y - 2);
            this.coverCtx.stroke();
            // 左下角
            this.coverCtx.beginPath();
            this.coverCtx.moveTo(this.cutSize.x - 2, this.cutSize.y + this.cutSize.height - 20);
            this.coverCtx.lineTo(this.cutSize.x - 2, this.cutSize.y + this.cutSize.height + 2);
            this.coverCtx.lineTo(this.cutSize.x + 20, this.cutSize.y + this.cutSize.height + 2);
            this.coverCtx.stroke();
            // 右下角
            this.coverCtx.beginPath();
            this.coverCtx.moveTo(this.cutSize.x + this.cutSize.width + 2, this.cutSize.y + this.cutSize.height - 22);
            this.coverCtx.lineTo(this.cutSize.x + this.cutSize.width + 2, this.cutSize.y + this.cutSize.height + 2);
            this.coverCtx.lineTo(this.cutSize.x + this.cutSize.width - 20, this.cutSize.y + this.cutSize.height + 2);
            this.coverCtx.stroke();
            // 右上角
            this.coverCtx.beginPath();
            this.coverCtx.moveTo(this.cutSize.x + this.cutSize.width - 20, this.cutSize.y - 2);
            this.coverCtx.lineTo(this.cutSize.x + this.cutSize.width + 2, this.cutSize.y - 2);
            this.coverCtx.lineTo(this.cutSize.x + this.cutSize.width + 2, this.cutSize.y + 22);
            this.coverCtx.stroke();
        };
        /**
         * 移动图像
         * @param x
         * @param y
         */
        Scenes.prototype.moveImage = function (x, y) {
            this.imageSize.x = x;
            this.imageSize.y = y;
            this.resDrwaImage();
        };
        Scenes.prototype.enterImage = function (file) {
            var _this = this;
            if (typeof file === 'string' && /^(\.\/)|^(\.\.\/)|^(\/)/.test(file))
                file = file;
            else if (typeof file === 'string' && file.indexOf('http') === 0)
                file = file;
            else if (typeof file === 'string')
                file = URL.createObjectURL(file);
            else if (typeof file === 'object')
                file = URL.createObjectURL(file);
            else {
                console.error(new Error('输入对图片参数仅支持base64,Bolb,httpUrl类型'));
            }
            var img = new Image();
            img.crossOrigin = "Anonymous";
            img.onload = function () {
                if (createImageBitmap) {
                    createImageBitmap(img)
                        .then(function (res) {
                        _this.drwaImage(res);
                    });
                }
                else {
                    _this.drwaImage(img);
                }
            };
            img.src = file;
            this.drawCutRect();
        };
        Scenes.prototype.drwaImage = function (img) {
            this.imageBitmap = img;
            this.getImageSize(img);
            this.ctx.drawImage(this.imageBitmap, this.imageSize.x, this.imageSize.y, this.imageSize.width, this.imageSize.height);
        };
        Scenes.prototype.resDrwaImage = function () {
            this.ctx.clearRect(0, 0, this.config.cWidth, this.config.cHeight);
            this.ctx.drawImage(this.imageBitmap, this.imageSize.x, this.imageSize.y, this.imageSize.width, this.imageSize.height);
        };
        Scenes.prototype.getImageSize = function (img) {
            this.scale = this.config.cWidth / img.width;
            this.imageSize.width = img.width * this.scale;
            this.imageSize.height = img.height * this.scale;
            this.imageSize.x = 0;
            this.imageSize.y = (this.config.cHeight - this.imageSize.height) / 2;
            this.imageSize.zoom = 1;
            this.imageSize.rotate = 0;
        };
        return Scenes;
    }());

    var App = /** @class */ (function () {
        function App(className, config) {
            this.Config = APP_CONFIG;
            var body;
            if (className) {
                body = document.body.querySelector(className);
            }
            else {
                body = document.body;
            }
            this.Config = Object.assign(this.Config, { cHeight: body.scrollHeight, cWidth: body.scrollWidth, width: body.scrollWidth, height: body.scrollHeight }, config);
            this.Scenes = new Scenes(this.Config);
            body.append(this.Scenes.$el);
            this.mounted();
        }
        App.prototype.enterImage = function (fileUrl) {
            this.Scenes.enterImage(fileUrl);
        };
        App.prototype.mounted = function () { };
        App.prototype.destroy = function () {
            var _this = this;
            Object.keys(this).forEach(function (e) {
                delete _this[e];
            });
        };
        return App;
    }());

    return App;

}());
