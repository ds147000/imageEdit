{"code":"var zoom = /** @class */ (function () {\r\n    function zoom() {\r\n        this.operating = false;\r\n        this.onChange = function (val) { };\r\n        this.$el = document.createElement('div');\r\n        this.$el.setAttribute('class', 'zoom-control');\r\n        this.$el.innerHTML = \"<div class=\\\"slider-back\\\"></div><div class=\\\"slider\\\"></div><div class=\\\"mask\\\" ></div>\";\r\n        this.$slider = this.$el.querySelector('.slider');\r\n        this.$sliderBack = this.$el.querySelector('.slider-back');\r\n        this.init();\r\n    }\r\n    zoom.prototype.init = function () {\r\n        this.$el.addEventListener('mousedown', this.onMouseDown.bind(this));\r\n        this.$el.addEventListener('mousemove', this.onMouseMove.bind(this));\r\n        this.$el.addEventListener('mouseup', this.onMouseUp.bind(this));\r\n        this.$el.addEventListener('mouseout', this.onMouseUp.bind(this));\r\n    };\r\n    zoom.prototype.onMouseDown = function (e) {\r\n        this.operating = true;\r\n        var width = this.$el.offsetWidth / 2;\r\n        var x = e.offsetX - width;\r\n        this.changeSlider(width + x);\r\n        this.changeValue(x / width);\r\n    };\r\n    zoom.prototype.onMouseMove = function (e) {\r\n        if (this.operating === false) {\r\n            return;\r\n        }\r\n        var width = this.$el.offsetWidth / 2;\r\n        var x = e.offsetX - width;\r\n        this.changeSlider(width + x);\r\n        this.changeValue(x / width);\r\n    };\r\n    zoom.prototype.onMouseUp = function () {\r\n        var _this = this;\r\n        this.operating = false;\r\n        this.timeCap = setTimeout(function () {\r\n            _this.hide();\r\n        }, 3000);\r\n    };\r\n    zoom.prototype.changeSlider = function (x) {\r\n        this.$slider.style.transform = \"translate(\" + x + \"px, -50%)\";\r\n        this.$slider.style.left = '0px';\r\n        this.$sliderBack.style.width = x + \"px\";\r\n    };\r\n    zoom.prototype.changeValue = function (val) {\r\n        val = parseFloat((val + 1).toFixed(2));\r\n        this.value = val;\r\n        this.onChange(this.value);\r\n    };\r\n    zoom.prototype.show = function () {\r\n        var _this = this;\r\n        clearTimeout(this.timeCap);\r\n        this.$el.style.display = 'block';\r\n        this.timeCap = setTimeout(function () {\r\n            _this.hide();\r\n        }, 3000);\r\n    };\r\n    zoom.prototype.hide = function () {\r\n        if (this.operating === true) {\r\n            return;\r\n        }\r\n        this.$el.style.display = 'none';\r\n    };\r\n    return zoom;\r\n}());\r\nexport default zoom;\r\n","references":[]}
